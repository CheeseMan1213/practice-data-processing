# Multi-stage Dockerfile for Rust WASM frontend development
# Build from project root: docker build -f frontend/Dockerfile.develop .

# ################################################################################
# Build stage - Install tools and build dependencies
FROM rust:1.89.0-slim AS builder

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install WASM target and trunk
RUN rustup target add wasm32-unknown-unknown
RUN cargo install trunk --version 0.21.14

# Set working directory
WORKDIR /app

# Copy frontend configuration files
COPY frontend/Cargo.toml ./Cargo.toml
COPY frontend/index.html ./index.html

# Create updated Trunk.toml with latest wasm-opt version
RUN echo 'trunk-version = "0.21.14"' > Trunk.toml && \
    echo '' >> Trunk.toml && \
    echo '[build]' >> Trunk.toml && \
    echo 'target = "index.html"' >> Trunk.toml && \
    echo 'release = false' >> Trunk.toml && \
    echo 'dist = "dist"' >> Trunk.toml && \
    echo '' >> Trunk.toml && \
    echo '[serve]' >> Trunk.toml && \
    echo 'port = 8082' >> Trunk.toml && \
    echo '' >> Trunk.toml && \
    echo '[clean]' >> Trunk.toml && \
    echo 'cargo = false' >> Trunk.toml && \
    echo '' >> Trunk.toml && \
    echo '[tools]' >> Trunk.toml && \
    echo 'wasm_bindgen = "0.2.100"' >> Trunk.toml && \
    echo 'wasm_opt = "version_123"' >> Trunk.toml

# Create a dummy lib.rs to build dependencies
RUN mkdir -p src && \
    echo "pub fn main() {}" > src/lib.rs

# Build dependencies first for better caching
RUN cargo build --release --target wasm32-unknown-unknown

# Copy the actual source code
COPY frontend/src ./src

# Build the WASM application with trunk
RUN trunk build --release

# ################################################################################
# Runtime stage - Serve with nginx
FROM nginx:stable-alpine AS runtime

# Create non-root user
RUN addgroup -g 10001 -S appuser && \
    adduser -u 10001 -S appuser -G appuser

# Copy built assets from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Set proper ownership and create necessary directories
RUN chown -R appuser:appuser /usr/share/nginx/html && \
    mkdir -p /var/cache/nginx/client_temp /var/run/nginx /var/log/nginx && \
    chown -R appuser:appuser /var/cache/nginx /var/run/nginx /var/log/nginx && \
    touch /var/run/nginx.pid && \
    chown appuser:appuser /var/run/nginx.pid

# Create a custom nginx.conf that works with non-root user
RUN echo 'pid /var/run/nginx.pid;' > /tmp/nginx.conf && \
    echo 'events { worker_connections 1024; }' >> /tmp/nginx.conf && \
    echo 'http {' >> /tmp/nginx.conf && \
    echo '    include /etc/nginx/mime.types;' >> /tmp/nginx.conf && \
    echo '    default_type application/octet-stream;' >> /tmp/nginx.conf && \
    echo '    access_log /var/log/nginx/access.log;' >> /tmp/nginx.conf && \
    echo '    error_log /var/log/nginx/error.log;' >> /tmp/nginx.conf && \
    echo '    include /etc/nginx/conf.d/*.conf;' >> /tmp/nginx.conf && \
    echo '}' >> /tmp/nginx.conf && \
    mv /tmp/nginx.conf /etc/nginx/nginx.conf && \
    chown appuser:appuser /etc/nginx/nginx.conf

# Switch to non-root user
USER appuser

# Set environment variables
ENV APP_HOST=http://127.0.0.1:3002
ENV RUST_LOG=info

# Expose port 8082
EXPOSE 8082

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8082/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]